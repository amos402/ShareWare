//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.17929
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ShareMetro.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/ShareWare.ServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserInfo", Namespace="http://schemas.datacontract.org/2004/07/ShareWare")]
    [System.SerializableAttribute()]
    public partial class UserInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Drawing.Bitmap ImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsMaleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MicroBlogField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NickNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QQField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SignatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Drawing.Bitmap Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMale {
            get {
                return this.IsMaleField;
            }
            set {
                if ((this.IsMaleField.Equals(value) != true)) {
                    this.IsMaleField = value;
                    this.RaisePropertyChanged("IsMale");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MicroBlog {
            get {
                return this.MicroBlogField;
            }
            set {
                if ((object.ReferenceEquals(this.MicroBlogField, value) != true)) {
                    this.MicroBlogField = value;
                    this.RaisePropertyChanged("MicroBlog");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NickName {
            get {
                return this.NickNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NickNameField, value) != true)) {
                    this.NickNameField = value;
                    this.RaisePropertyChanged("NickName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QQ {
            get {
                return this.QQField;
            }
            set {
                if ((object.ReferenceEquals(this.QQField, value) != true)) {
                    this.QQField = value;
                    this.RaisePropertyChanged("QQ");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Signature {
            get {
                return this.SignatureField;
            }
            set {
                if ((object.ReferenceEquals(this.SignatureField, value) != true)) {
                    this.SignatureField = value;
                    this.RaisePropertyChanged("Signature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OnlineUserInfo", Namespace="http://schemas.datacontract.org/2004/07/ShareWare")]
    [System.SerializableAttribute()]
    public partial class OnlineUserInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageHashField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NickNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageHash {
            get {
                return this.ImageHashField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageHashField, value) != true)) {
                    this.ImageHashField = value;
                    this.RaisePropertyChanged("ImageHash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NickName {
            get {
                return this.NickNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NickNameField, value) != true)) {
                    this.NickNameField = value;
                    this.RaisePropertyChanged("NickName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IShareService", CallbackContract=typeof(ShareMetro.ServiceReference.IShareServiceCallback))]
    public interface IShareService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/GetData", ReplyAction="http://tempuri.org/IShareService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/GetData", ReplyAction="http://tempuri.org/IShareService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IShareService/GetDataUsingDataContractResponse")]
        ShareMetro.ServiceReference.CompositeType GetDataUsingDataContract(ShareMetro.ServiceReference.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IShareService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<ShareMetro.ServiceReference.CompositeType> GetDataUsingDataContractAsync(ShareMetro.ServiceReference.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IShareService/TickTack")]
        void TickTack();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IShareService/TickTack")]
        System.Threading.Tasks.Task TickTackAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/Register", ReplyAction="http://tempuri.org/IShareService/RegisterResponse")]
        bool Register(ShareMetro.ServiceReference.UserInfo userInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/Register", ReplyAction="http://tempuri.org/IShareService/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(ShareMetro.ServiceReference.UserInfo userInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/Login", ReplyAction="http://tempuri.org/IShareService/LoginResponse")]
        int Login(string userName, string passWord, string mac);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/Login", ReplyAction="http://tempuri.org/IShareService/LoginResponse")]
        System.Threading.Tasks.Task<int> LoginAsync(string userName, string passWord, string mac);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IShareService/Logout")]
        void Logout();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IShareService/Logout")]
        System.Threading.Tasks.Task LogoutAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/UploadShareInfo", ReplyAction="http://tempuri.org/IShareService/UploadShareInfoResponse")]
        bool UploadShareInfo(System.Collections.Generic.List<ShareWare.ShareFile.FileInfoTransfer> fileList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/UploadShareInfo", ReplyAction="http://tempuri.org/IShareService/UploadShareInfoResponse")]
        System.Threading.Tasks.Task<bool> UploadShareInfoAsync(System.Collections.Generic.List<ShareWare.ShareFile.FileInfoTransfer> fileList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/DownloadShareInfo", ReplyAction="http://tempuri.org/IShareService/DownloadShareInfoResponse")]
        System.Collections.Generic.List<ShareWare.ShareFile.FileInfoTransfer> DownloadShareInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/DownloadShareInfo", ReplyAction="http://tempuri.org/IShareService/DownloadShareInfoResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ShareWare.ShareFile.FileInfoTransfer>> DownloadShareInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IShareService/RemoveOldFile")]
        void RemoveOldFile(System.Collections.Generic.List<ShareWare.ShareFile.FileInfoTransfer> fileList);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IShareService/RemoveOldFile")]
        System.Threading.Tasks.Task RemoveOldFileAsync(System.Collections.Generic.List<ShareWare.ShareFile.FileInfoTransfer> fileList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/SearchFile", ReplyAction="http://tempuri.org/IShareService/SearchFileResponse")]
        System.Collections.Generic.List<ShareWare.ShareFile.FileInfoData> SearchFile(System.Collections.Generic.List<string> nameList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/SearchFile", ReplyAction="http://tempuri.org/IShareService/SearchFileResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ShareWare.ShareFile.FileInfoData>> SearchFileAsync(System.Collections.Generic.List<string> nameList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/DownloadRequest", ReplyAction="http://tempuri.org/IShareService/DownloadRequestResponse")]
        int DownloadRequest(string hash, int nPort);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/DownloadRequest", ReplyAction="http://tempuri.org/IShareService/DownloadRequestResponse")]
        System.Threading.Tasks.Task<int> DownloadRequestAsync(string hash, int nPort);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IShareService/UploadImage")]
        void UploadImage(System.Drawing.Bitmap image);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IShareService/UploadImage")]
        System.Threading.Tasks.Task UploadImageAsync(System.Drawing.Bitmap image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/DownloadUserImage", ReplyAction="http://tempuri.org/IShareService/DownloadUserImageResponse")]
        System.Drawing.Bitmap DownloadUserImage(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/DownloadUserImage", ReplyAction="http://tempuri.org/IShareService/DownloadUserImageResponse")]
        System.Threading.Tasks.Task<System.Drawing.Bitmap> DownloadUserImageAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IShareService/RequestConversation")]
        void RequestConversation(string userName, int localPort);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IShareService/RequestConversation")]
        System.Threading.Tasks.Task RequestConversationAsync(string userName, int localPort);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/RequestOpenShareFolder", ReplyAction="http://tempuri.org/IShareService/RequestOpenShareFolderResponse")]
        void RequestOpenShareFolder(string userName, int localPort);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/RequestOpenShareFolder", ReplyAction="http://tempuri.org/IShareService/RequestOpenShareFolderResponse")]
        System.Threading.Tasks.Task RequestOpenShareFolderAsync(string userName, int localPort);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IShareService/SendChatRoomMessage")]
        void SendChatRoomMessage(string msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IShareService/SendChatRoomMessage")]
        System.Threading.Tasks.Task SendChatRoomMessageAsync(string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/DownloadUserInfo", ReplyAction="http://tempuri.org/IShareService/DownloadUserInfoResponse")]
        ShareMetro.ServiceReference.UserInfo DownloadUserInfo(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/DownloadUserInfo", ReplyAction="http://tempuri.org/IShareService/DownloadUserInfoResponse")]
        System.Threading.Tasks.Task<ShareMetro.ServiceReference.UserInfo> DownloadUserInfoAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/ChangedUserInfo", ReplyAction="http://tempuri.org/IShareService/ChangedUserInfoResponse")]
        bool ChangedUserInfo(ShareMetro.ServiceReference.UserInfo userInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/ChangedUserInfo", ReplyAction="http://tempuri.org/IShareService/ChangedUserInfoResponse")]
        System.Threading.Tasks.Task<bool> ChangedUserInfoAsync(ShareMetro.ServiceReference.UserInfo userInfo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IShareServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IShareService/DownloadPerformance")]
        void DownloadPerformance(string szHash, string szIp, int nPort);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IShareService/NewUser")]
        void NewUser(ShareMetro.ServiceReference.OnlineUserInfo user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IShareService/UserLeave")]
        void UserLeave(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IShareService/RefreshUserList")]
        void RefreshUserList(System.Collections.Generic.List<ShareMetro.ServiceReference.OnlineUserInfo> userList);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IShareService/ConversationPerformance")]
        void ConversationPerformance(string remoteIp, int remotePort);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IShareService/OpenShareFolderPerfromance")]
        void OpenShareFolderPerfromance(string remoteIp, int remotePort);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IShareService/ReceiveChatRoomMessage")]
        void ReceiveChatRoomMessage(string msg, string userName, string nickName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IShareService/NewChatRoomMessage")]
        void NewChatRoomMessage();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IShareServiceChannel : ShareMetro.ServiceReference.IShareService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ShareServiceClient : System.ServiceModel.DuplexClientBase<ShareMetro.ServiceReference.IShareService>, ShareMetro.ServiceReference.IShareService {
        
        public ShareServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ShareServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ShareServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ShareServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ShareServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public ShareMetro.ServiceReference.CompositeType GetDataUsingDataContract(ShareMetro.ServiceReference.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<ShareMetro.ServiceReference.CompositeType> GetDataUsingDataContractAsync(ShareMetro.ServiceReference.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public void TickTack() {
            base.Channel.TickTack();
        }
        
        public System.Threading.Tasks.Task TickTackAsync() {
            return base.Channel.TickTackAsync();
        }
        
        public bool Register(ShareMetro.ServiceReference.UserInfo userInfo) {
            return base.Channel.Register(userInfo);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(ShareMetro.ServiceReference.UserInfo userInfo) {
            return base.Channel.RegisterAsync(userInfo);
        }
        
        public int Login(string userName, string passWord, string mac) {
            return base.Channel.Login(userName, passWord, mac);
        }
        
        public System.Threading.Tasks.Task<int> LoginAsync(string userName, string passWord, string mac) {
            return base.Channel.LoginAsync(userName, passWord, mac);
        }
        
        public void Logout() {
            base.Channel.Logout();
        }
        
        public System.Threading.Tasks.Task LogoutAsync() {
            return base.Channel.LogoutAsync();
        }
        
        public bool UploadShareInfo(System.Collections.Generic.List<ShareWare.ShareFile.FileInfoTransfer> fileList) {
            return base.Channel.UploadShareInfo(fileList);
        }
        
        public System.Threading.Tasks.Task<bool> UploadShareInfoAsync(System.Collections.Generic.List<ShareWare.ShareFile.FileInfoTransfer> fileList) {
            return base.Channel.UploadShareInfoAsync(fileList);
        }
        
        public System.Collections.Generic.List<ShareWare.ShareFile.FileInfoTransfer> DownloadShareInfo() {
            return base.Channel.DownloadShareInfo();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ShareWare.ShareFile.FileInfoTransfer>> DownloadShareInfoAsync() {
            return base.Channel.DownloadShareInfoAsync();
        }
        
        public void RemoveOldFile(System.Collections.Generic.List<ShareWare.ShareFile.FileInfoTransfer> fileList) {
            base.Channel.RemoveOldFile(fileList);
        }
        
        public System.Threading.Tasks.Task RemoveOldFileAsync(System.Collections.Generic.List<ShareWare.ShareFile.FileInfoTransfer> fileList) {
            return base.Channel.RemoveOldFileAsync(fileList);
        }
        
        public System.Collections.Generic.List<ShareWare.ShareFile.FileInfoData> SearchFile(System.Collections.Generic.List<string> nameList) {
            return base.Channel.SearchFile(nameList);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ShareWare.ShareFile.FileInfoData>> SearchFileAsync(System.Collections.Generic.List<string> nameList) {
            return base.Channel.SearchFileAsync(nameList);
        }
        
        public int DownloadRequest(string hash, int nPort) {
            return base.Channel.DownloadRequest(hash, nPort);
        }
        
        public System.Threading.Tasks.Task<int> DownloadRequestAsync(string hash, int nPort) {
            return base.Channel.DownloadRequestAsync(hash, nPort);
        }
        
        public void UploadImage(System.Drawing.Bitmap image) {
            base.Channel.UploadImage(image);
        }
        
        public System.Threading.Tasks.Task UploadImageAsync(System.Drawing.Bitmap image) {
            return base.Channel.UploadImageAsync(image);
        }
        
        public System.Drawing.Bitmap DownloadUserImage(string name) {
            return base.Channel.DownloadUserImage(name);
        }
        
        public System.Threading.Tasks.Task<System.Drawing.Bitmap> DownloadUserImageAsync(string name) {
            return base.Channel.DownloadUserImageAsync(name);
        }
        
        public void RequestConversation(string userName, int localPort) {
            base.Channel.RequestConversation(userName, localPort);
        }
        
        public System.Threading.Tasks.Task RequestConversationAsync(string userName, int localPort) {
            return base.Channel.RequestConversationAsync(userName, localPort);
        }
        
        public void RequestOpenShareFolder(string userName, int localPort) {
            base.Channel.RequestOpenShareFolder(userName, localPort);
        }
        
        public System.Threading.Tasks.Task RequestOpenShareFolderAsync(string userName, int localPort) {
            return base.Channel.RequestOpenShareFolderAsync(userName, localPort);
        }
        
        public void SendChatRoomMessage(string msg) {
            base.Channel.SendChatRoomMessage(msg);
        }
        
        public System.Threading.Tasks.Task SendChatRoomMessageAsync(string msg) {
            return base.Channel.SendChatRoomMessageAsync(msg);
        }
        
        public ShareMetro.ServiceReference.UserInfo DownloadUserInfo(int userId) {
            return base.Channel.DownloadUserInfo(userId);
        }
        
        public System.Threading.Tasks.Task<ShareMetro.ServiceReference.UserInfo> DownloadUserInfoAsync(int userId) {
            return base.Channel.DownloadUserInfoAsync(userId);
        }
        
        public bool ChangedUserInfo(ShareMetro.ServiceReference.UserInfo userInfo) {
            return base.Channel.ChangedUserInfo(userInfo);
        }
        
        public System.Threading.Tasks.Task<bool> ChangedUserInfoAsync(ShareMetro.ServiceReference.UserInfo userInfo) {
            return base.Channel.ChangedUserInfoAsync(userInfo);
        }
    }
}
