//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.17929
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleApplication1.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/ShareWare.ServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IShareService", CallbackContract=typeof(ConsoleApplication1.ServiceReference.IShareServiceCallback))]
    public interface IShareService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/GetData", ReplyAction="http://tempuri.org/IShareService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/GetData", ReplyAction="http://tempuri.org/IShareService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IShareService/GetDataUsingDataContractResponse")]
        ConsoleApplication1.ServiceReference.CompositeType GetDataUsingDataContract(ConsoleApplication1.ServiceReference.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IShareService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<ConsoleApplication1.ServiceReference.CompositeType> GetDataUsingDataContractAsync(ConsoleApplication1.ServiceReference.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/Login", ReplyAction="http://tempuri.org/IShareService/LoginResponse")]
        int Login(string userName, string passWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/Login", ReplyAction="http://tempuri.org/IShareService/LoginResponse")]
        System.Threading.Tasks.Task<int> LoginAsync(string userName, string passWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/SendShareFile", ReplyAction="http://tempuri.org/IShareService/SendShareFileResponse")]
        bool SendShareFile(System.Collections.Generic.List<System.Collections.Generic.List<ShareWare.FileInfo>> list);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/SendShareFile", ReplyAction="http://tempuri.org/IShareService/SendShareFileResponse")]
        System.Threading.Tasks.Task<bool> SendShareFileAsync(System.Collections.Generic.List<System.Collections.Generic.List<ShareWare.FileInfo>> list);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/SendClientInfo", ReplyAction="http://tempuri.org/IShareService/SendClientInfoResponse")]
        bool SendClientInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/SendClientInfo", ReplyAction="http://tempuri.org/IShareService/SendClientInfoResponse")]
        System.Threading.Tasks.Task<bool> SendClientInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/UploadShareInfo", ReplyAction="http://tempuri.org/IShareService/UploadShareInfoResponse")]
        int UploadShareInfo(System.Collections.Generic.List<ShareWare.ShareFile.FileInfoTransfer> fileList, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/UploadShareInfo", ReplyAction="http://tempuri.org/IShareService/UploadShareInfoResponse")]
        System.Threading.Tasks.Task<int> UploadShareInfoAsync(System.Collections.Generic.List<ShareWare.ShareFile.FileInfoTransfer> fileList, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/SearchFile", ReplyAction="http://tempuri.org/IShareService/SearchFileResponse")]
        System.Collections.Generic.List<ShareWare.FileOwner> SearchFile(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/SearchFile", ReplyAction="http://tempuri.org/IShareService/SearchFileResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ShareWare.FileOwner>> SearchFileAsync(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/DownloadRequest", ReplyAction="http://tempuri.org/IShareService/DownloadRequestResponse")]
        void DownloadRequest(ShareWare.FileOwner fileOnwer, int nPort);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShareService/DownloadRequest", ReplyAction="http://tempuri.org/IShareService/DownloadRequestResponse")]
        System.Threading.Tasks.Task DownloadRequestAsync(ShareWare.FileOwner fileOnwer, int nPort);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IShareServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IShareService/DownloadPerformance")]
        void DownloadPerformance(string szHash, string szIp, int nPort);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IShareServiceChannel : ConsoleApplication1.ServiceReference.IShareService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ShareServiceClient : System.ServiceModel.DuplexClientBase<ConsoleApplication1.ServiceReference.IShareService>, ConsoleApplication1.ServiceReference.IShareService {
        
        public ShareServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ShareServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ShareServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ShareServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ShareServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public ConsoleApplication1.ServiceReference.CompositeType GetDataUsingDataContract(ConsoleApplication1.ServiceReference.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<ConsoleApplication1.ServiceReference.CompositeType> GetDataUsingDataContractAsync(ConsoleApplication1.ServiceReference.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public int Login(string userName, string passWord) {
            return base.Channel.Login(userName, passWord);
        }
        
        public System.Threading.Tasks.Task<int> LoginAsync(string userName, string passWord) {
            return base.Channel.LoginAsync(userName, passWord);
        }
        
        public bool SendShareFile(System.Collections.Generic.List<System.Collections.Generic.List<ShareWare.FileInfo>> list) {
            return base.Channel.SendShareFile(list);
        }
        
        public System.Threading.Tasks.Task<bool> SendShareFileAsync(System.Collections.Generic.List<System.Collections.Generic.List<ShareWare.FileInfo>> list) {
            return base.Channel.SendShareFileAsync(list);
        }
        
        public bool SendClientInfo() {
            return base.Channel.SendClientInfo();
        }
        
        public System.Threading.Tasks.Task<bool> SendClientInfoAsync() {
            return base.Channel.SendClientInfoAsync();
        }
        
        public int UploadShareInfo(System.Collections.Generic.List<ShareWare.ShareFile.FileInfoTransfer> fileList, int userId) {
            return base.Channel.UploadShareInfo(fileList, userId);
        }
        
        public System.Threading.Tasks.Task<int> UploadShareInfoAsync(System.Collections.Generic.List<ShareWare.ShareFile.FileInfoTransfer> fileList, int userId) {
            return base.Channel.UploadShareInfoAsync(fileList, userId);
        }
        
        public System.Collections.Generic.List<ShareWare.FileOwner> SearchFile(string fileName) {
            return base.Channel.SearchFile(fileName);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ShareWare.FileOwner>> SearchFileAsync(string fileName) {
            return base.Channel.SearchFileAsync(fileName);
        }
        
        public void DownloadRequest(ShareWare.FileOwner fileOnwer, int nPort) {
            base.Channel.DownloadRequest(fileOnwer, nPort);
        }
        
        public System.Threading.Tasks.Task DownloadRequestAsync(ShareWare.FileOwner fileOnwer, int nPort) {
            return base.Channel.DownloadRequestAsync(fileOnwer, nPort);
        }
    }
}
